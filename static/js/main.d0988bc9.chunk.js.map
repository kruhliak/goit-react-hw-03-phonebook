{"version":3,"sources":["components/ContactForm/ContactForm.styles.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styles.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["Form","styled","form","ContactForm","state","name","number","handleChangeForm","e","currentTarget","value","setState","handleSubmitForm","preventDefault","props","onSubmit","resetForm","this","type","onChange","pattern","title","required","autoComplete","Component","List","ul","ContactList","contactsData","onDeleteContact","map","contact","onClick","id","Thumb","div","Filter","filter","App","contacts","handleChange","handleSubmit","randomId","nanoid","find","includes","alert","getVisibleContacts","normalizedFilter","toLowerCase","item","deleteContact","contactId","prevState","_","localStorage","setItem","JSON","stringify","getItem","parsedContacts","parse","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0988bc9.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: grid;\n  grid-template-columns: min-content;\n\n  & button {\n    margin: 10px 0;\n    background-color: #e6ffe0d5;\n    border: 1px solid #000;\n    border-radius: 4px;\n    &:hover,\n    :focus {\n      background-color: #bffab0d3;\n      transform: scale(1.1);\n    }\n  }\n`;\n","import React, { Component } from 'react';\nimport { Form } from './ContactForm.styles';\n\nexport default class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChangeForm = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmitForm = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    this.props.onSubmit(name, number);\n\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <div>\n        <Form onSubmit={this.handleSubmitForm}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              onChange={this.handleChangeForm}\n              value={this.state.name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              autoComplete=\"off\"\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              onChange={this.handleChangeForm}\n              value={this.state.number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              autoComplete=\"off\"\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </Form>\n      </div>\n    );\n  }\n}\n\n// function ContactForm({ name, onSubmit, onChange, number }) {\n//   return (\n//     <div>\n//       <Form onSubmit={onSubmit}>\n//         <label>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             onChange={onChange}\n//             value={name}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             autoComplete=\"off\"\n//           />\n//         </label>\n//         <label>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             onChange={onChange}\n//             value={number}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             autoComplete=\"off\"\n//           />\n//         </label>\n//         <button type=\"submit\">Add contact</button>\n//       </Form>\n//     </div>\n//   );\n// }\n\n// export default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 5px;\n  margin: 10px 0;\n\n  & li {\n    margin: 5px 0;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    & button {\n      margin-left: 10px;\n      background-color: #f0c8c8;\n      border: 1px solid #000;\n      border-radius: 4px;\n      &:hover,\n    :focus {\n      background-color: #f09797;\n      transform: scale(1.05);\n    }\n    }\n  }\n`;\n","import React from 'react';\nimport { List } from './ContactList.styles';\n\nfunction ContactList({ contactsData, onDeleteContact }) {\n  return (\n    <List>\n      {contactsData.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\n            Удалить\n          </button>\n        </li>\n      ))}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Thumb = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n\n  & p {\n    margin: 5px 0;\n  }\n`;\n","import {Thumb} from './Filter.styles'\n\nfunction Filter({ onChange, filter }) {\n  return (\n    <Thumb>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChange}\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        autoComplete=\"off\"\n      />\n    </Thumb>\n  );\n}\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidUpdate(_, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (name, number) => {\n    const { contacts } = this.state;\n    const randomId = nanoid();\n    const findContact = contacts.find(contact => contact.name.includes(name));\n\n    findContact\n      ? alert(`${name} is already in contacts`)\n      : this.setState({\n          contacts: [...contacts, { id: randomId, name, number }],\n        });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div id=\"container\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.handleSubmit} />\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={this.handleChange} />\n        <ContactList\n          contactsData={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}